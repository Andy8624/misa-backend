// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider              = "prisma-erd-generator"
  output                = "ERD.pdf" // có đuôi .svg hoặc .png hoặc .pdf
  disableRelationLines  = true
  includeRelationFields = false
}

// Bảng lưu thông tin của Kế toán (Accountant)
model Accountant {
  id          String   @id @default(uuid())
  email       String   @unique
  fullName    String   @map("full_name") // Họ và tên
  phoneNumber String   @map("phone_number") // Số điện thoại 
  birthDate   DateTime @map("birth_date") // Ngày sinh
  gender      String // Giới tính
  password    String // Mật khẩu

  avatarUrl String @default("default-avatar.jpg") @map("avatar_url")
  address   String @default("Not provided")
  zipCode   String @default("00000") @map("zip_code")

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Khóa ngoại
  customers Customer[] // Một kế toán có nhiều công ty

  @@map("accountants")
}

// Bảng chứa thông tin các công ty (Customer) mà kế toán (Accountant) đang hợp tác làm việc
model Customer {
  id             String   @id @default(uuid())
  logoUrl        String?  @map("logo_url") // Url ảnh logo
  businessType   String   @map("business_type") // Loại hình doanh nghiệp (Doanh nghiệp/ Hộ kinh doanh)
  taxCode        String   @map("tax_code") // Mã số thuế
  customerName   String   @map("customer_name") // Tên khách hàng
  customerGroup  String?  @map("customer_group") // Nhóm khách hàng
  foundedDate    DateTime @map("founded_date") // Ngày thành lập
  vatTaxType     String   @map("vat_tax_type") // Kê khai thuế GTGT (tháng/quý)
  customerStatus String   @map("customer_status") // Trạng thái khách hàng

  // Thông tin địa chỉ
  province      String // Tỉnh/Thành phố
  district      String // Quận/Huyện
  ward          String? // Phường/Xã
  streetAddress String  @map("street_address") // Số nhà, tên đường, phố
  fullAddress   String  @map("full_address") // Địa chỉ đầy đủ

  contactName        String @map("contact_name")
  contactPhoneNumber String @map("contact_phone_number") // Số điện thoại 
  contactEmail       String @map("contact_email")
  contactPosition    String @map("contact_position") // Chức danh

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Quan hệ với accountant
  accountant   Accountant @relation(fields: [accountantId], references: [id])
  accountantId String     @map("accountant_id")

  // Mang danh sách đối tượng khác
  partners            Partner[] // Một công ty có nhiều đối tác (KHÁCH HÀNG - NHÀ CUNG CẤP)
  employees           Employee[] // Một công ty có nhiều nhân viên
  units               Unit[] // Một công ty có nhiều đơn vị tính
  vatTax              VatTax[] // Một công ty có nhiều mức thuế
  goodAndServiceGroup GoodsAndServicesGroup[] // Một công ty có nhiều nhóm hàng hóa dịch vụ
  goodsAndServices    GoodsAndServices[] // Một công ty có nhiều loại hàng hóa dịch vụ
  chartOfAccount      ChartOfAccount[] // Một công ty có nhiều tài khoản
  warrantyPeriod      WarrantyPeriod[] // Một công ty có thể có nhiều mức bảo hành
  Warehouse           Warehouse[] // Một công ty có nhiều kho
  InventoryIn         InventoryIn[] // Một công ty có nhiều phiếu nhập
  InventoryOut        InventoryOut[] // Một công ty có nhiều phiếu xuất

  @@map("customers")
}

// Bảng lưu thông tin các đối tác (Partners) 
// của từng công ty (Customer) mà kế toán (Accountant) đang làm
// Partners có thể là KHÁCH HÀNG hoặc NHÀ CUNG CẤP
model Partner {
  id          String  @id @default(uuid())
  partnerCode String  @map("partner_code") // Mã khách hàng
  partnerType String  @map("partner_type") // Loại đối tác (CLIENT', 'SUPPLIER')
  legalType   String  @map("legal_type") // Loại pháp lý (Cá nhân - tổ chức)
  taxCode     String  @map("tax_code") // Mã số thuế
  govUnitCode String? @map("gov_unit_code") // Mã số đơn vị có quan hệ với Ngân sách

  fullName    String  @map("full_name") // Tên 
  address     String // Địa chỉ 
  phoneNumber String  @map("phone_number") // Số điện thoại 
  websiteUrl  String? @map("website_url") // Đường dẫn đến website của đối tác (Partners)

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Khóa ngoại
  // Quan hệ với customer
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @map("customer_id")

  // Bao gồm các tài khoản của đối tượng này
  bankAccounts BankAccount[] // Một đối tác có nhiều tài khoản ngân hàng

  // Relations với InventoryIn
  asClient InventoryIn[] @relation("InventoryInClient")
  asObject InventoryIn[] @relation("InventoryInObject")

  // Relations với InventoryOut
  asClientOut InventoryOut[] @relation("InventoryOutClient")
  asObjectOut InventoryOut[] @relation("InventoryOutObject")

  CashReceipCustomer CashReceip[] @relation("CashReceipCustomer")
  CashReceipSubject  CashReceip[] @relation("CashReceipSubject")

  CashPaymentSubject  CashPayment[] @relation("CashPaymentSubject")
  CashPaymentCustomer CashPayment[] @relation("CashPaymentCustomer")

  CashReceipVoucherItem  CashReceipVoucherItem[]  @relation("CashReceipVoucherItemSubject")
  CashPaymentVoucherItem CashPaymentVoucherItem[] @relation("CashPaymentVoucherItemSubject")

  DepositReceipCustomer  DepositReceip[]  @relation("DepositReceipCustomer")
  DepositReceipSubject   DepositReceip[]  @relation("DepositReceipSubject")
  DepositPaymentSupplier DepositPayment[] @relation("DepositPaymentSupplier")
  DepositPaymentSubject  DepositPayment[] @relation("DepositPaymentSubject")

  DepositReceipItemSubject DepositReceipItem[]  @relation("DepositReceipItemSubject")
  DepositPaymentItem       DepositPaymentItem[] @relation("DepositPaymentItemSubject")

  @@map("partners")
}

model Bank {
  id                 String  @id @default(uuid())
  fullName           String? @map("full_name") // Tên tiếng việt
  shortName          String? @map("short_name") // Tên viết tắt
  englishName        String? @map("english_name") // Tên tiếng anh
  headquarterAddress String? @map("headquarter_address") // Địa chỉ trụ sở chính
  description        String? // Mô tả
  logoUrl            String? @map("logo_url") // Địa chỉ logo ngân hàng

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Bao gồm danh sách các tài khoản thuộc ngân hàng này
  bankAccounts BankAccount[]

  CashReceipVoucherItem  CashReceipVoucherItem[]  @relation("CashReceipVoucherItem_Bank")
  CashPaymentVoucherItem CashPaymentVoucherItem[] @relation("CashPaymentVoucherItem_Bank")

  @@map("banks")
}

model BankAccount {
  id                   String  @id @default(uuid())
  accountNumber        String? @map("account_number") // Số tài khoản
  provinceOrCity       String? @map("province_or_city") // Tỉnh thành phố
  branchName           String? @map("branch_name") // Tên chi nhánh
  branchAddress        String? @map("branch_address") // Địa chỉ chi nhánh
  deltailBranchAddress String? @map("detail_branch_address") // Địa chỉ chi tiết chi nhánh

  // Khóa ngoại
  // Quan hệ với đối tác
  Partner   Partner? @relation(fields: [partnerId], references: [id])
  partnerId String?  @map("partner_id")

  // Quan hệ với nhân viên
  Employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?   @map("employee_id")

  // Quan hệ với ngân hàng
  Bank   Bank?   @relation(fields: [bankId], references: [id])
  bankId String? @map("bank_id")

  DepositReceipBank  DepositReceip[]  @relation("DepositReceipBank")
  DepositPaymentBank DepositPayment[] @relation("DepositPaymentBank")

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("bank_accounts")
}

model Employee {
  id           String @id @default(uuid())
  employeeCode String @map("employee_code") // Mã nhân viên (NV0001)

  // Thông tin cá nhân
  fullName           String   @map("full_name")
  dob                DateTime // Ngày sinh
  sex                String // Giới tính Male - Female - Other
  address            String // Địa chỉ
  position           String // Chức danh
  passportNumber     String?  @map("passport_number") // Số hộ chiếu
  phoneNumber        String   @map("phone_number") // Số điện thoại
  idCardNumber       String   @map("id_card_number") // Số CCCD
  idCardIssuedDate   String   @map("id_card_issued_date") // Ngày cấp CCCD
  idCardPlaceOfIssue String   @map("id_card_place_of_issue") // Nơi cấp CCCD

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Khóa ngoại
  // Quan hệ với customer
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @map("customer_id")

  // Mang danh sách đối tượng khác
  bankAccounts BankAccount[] // Một nhân viên có nhiều tài khoản ngân hàng

  InventoryIns InventoryIn[] // Một nhân viên có thể tạo nhiều phiếu nhập kho
  InventoryOut InventoryOut[] // Một nhân viên có thể tạo nhiều phiếu xuất kho

  CashReceipEmployeeByType CashReceip[] @relation("CashReceipEmployeeByType")
  CashReceipEmployee       CashReceip[] @relation("CashReceipEmployee")

  CashPaymentEmployee       CashPayment[] @relation("CashPaymentEmployee")
  CashPaymentEmployeeByType CashPayment[] @relation("CashPaymentEmployeeByType")

  DebtCollectorEmployee DepositReceip[] @relation("DebtCollectorEmployee")
  DepositReceipEmployee DepositReceip[] @relation("DepositReceipEmployee")

  DepositPaymentEmployee DepositPayment[] @relation("DepositPaymentEmployee")
  DepositPayment         DepositPayment[] @relation("DepositPaymentEmployeeByType")

  @@map("employees")
}

model WarrantyPeriod {
  id          String @id @default(uuid())
  description String // Mô tả

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Chứa danh sách các bảng khác
  goodsAndServices GoodsAndServices[] // Một loại bảo hành thuộc nhiều dịch vụ hàng hóa

  // Quan hệ với công ty
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  @@map("warranty_periods")
}

model GoodsAndServices {
  id                   String  @id @default(uuid())
  name                 String
  code                 String
  vatDecrease          String  @map("vat_decrease")
  minimumStockQuantity Int     @map("minimum_stock_quantity")
  image                String?
  source               String?
  description          String?
  purchaseDescription  String? @map("purchase_description")
  saleDescription      String? @map("sale_description")
  latestPurchasePrice  Int     @map("latest_purchase_price")

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Quan hệ với Unit
  Unit   Unit?   @relation(fields: [unitId], references: [id])
  unitId String? @map("unit_id")

  // Quan hệ với WarrantyPeriod
  WarrantyPeriod   WarrantyPeriod? @relation(fields: [warrantyPeriodId], references: [id])
  warrantyPeriodId String?         @map("warranty_period_id")

  // Quan hệ với VatTax
  VatTax   VatTax? @relation(fields: [vatTaxId], references: [id])
  vatTaxId String? @map("vat_tax_id")

  // Quan hệ với ChartOfAccount (nhiều foreign keys)
  WarehouseAccount   ChartOfAccount? @relation("WarehouseAccount", fields: [warehouseAccountId], references: [id])
  warehouseAccountId String?         @map("warehouse_account_id")

  ReturnAccount   ChartOfAccount? @relation("ReturnAccount", fields: [returnAccountId], references: [id])
  returnAccountId String?         @map("return_account_id")

  RevenueAccount   ChartOfAccount? @relation("RevenueAccount", fields: [revenueAccountId], references: [id])
  revenueAccountId String?         @map("revenue_account_id")

  ExpenseAccount   ChartOfAccount? @relation("ExpenseAccount", fields: [expenseAccountId], references: [id])
  expenseAccountId String?         @map("expense_account_id")

  SalesAllowanceAccount   ChartOfAccount? @relation("SalesAllowanceAccount", fields: [salesAllowanceAccountId], references: [id])
  salesAllowanceAccountId String?         @map("sales_allowance_account_id")

  DiscountAccount   ChartOfAccount? @relation("DiscountAccount", fields: [discountAccountId], references: [id])
  discountAccountId String?         @map("discount_account_id")

  // Quan hệ với công ty
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  // Mang danh sách đối tượng khác
  GoodsAndServicesGroupMapping GoodsAndServicesGroupMapping[]
  InventoryOutItems            InventoryOutItem[]
  inventoryInItems             InventoryInItem[]

  @@map("goods_and_services")
}

model GoodsAndServicesGroup {
  id     String @id @default(uuid())
  code   String
  name   String
  status String

  // Mang danh sách đối tượng khác
  GoodsAndServicesGroupMapping GoodsAndServicesGroupMapping[]

  // Self-referential relationship
  parentGroup   GoodsAndServicesGroup? @relation("ParentGroup", fields: [parentGroupId], references: [id])
  parentGroupId String?                @map("parent_group_id")

  // Quan hệ ngược - các nhóm con
  childGroups GoodsAndServicesGroup[] @relation("ParentGroup")

  // QUan hệ với công ty
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("goods_and_services_groups")
}

model GoodsAndServicesGroupMapping {
  id String @id @default(uuid())

  // Quan hệ với GoodsAndServices
  goodsAndServices   GoodsAndServices @relation(fields: [goodsAndServicesId], references: [id], onDelete: Cascade)
  goodsAndServicesId String           @map("goods_and_services_id")

  // Quan hệ với GoodsAndServicesGroup
  goodsAndServicesGroup   GoodsAndServicesGroup @relation(fields: [goodsAndServicesGroupId], references: [id], onDelete: Cascade)
  goodsAndServicesGroupId String                @map("goods_and_services_group_id")

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  // Đảm bảo không có duplicate mapping
  @@unique([goodsAndServicesId, goodsAndServicesGroupId])
  @@map("goods_and_services_group_mappings")
}

model Unit {
  id          String  @id @default(uuid())
  name        String
  status      String
  description String?

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Mang danh sách đối tượng khác
  goodsAndServices GoodsAndServices[]

  // Quan hệ với Customer (Công ty)
  Customer         Customer?          @relation(fields: [customerId], references: [id])
  customerId       String?
  InventoryOutItem InventoryOutItem[]
  InventoryInItem  InventoryInItem[]

  @@map("units")
}

model VatTax {
  id      String @id @default(uuid())
  name    String
  percent Int

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Mang danh sách đối tượng khác
  goodsAndServices GoodsAndServices[]

  // Quan hệ với bảng công ty 
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  @@map("vat_taxes")
}

model ChartOfAccount {
  id              String  @id @default(uuid())
  accountNumber   String? @map("account_number")
  accountName     String? @map("account_name")
  englishName     String? @map("english_name")
  particular      String?
  characteristics String?

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Self-referencing relation
  primaryAccount   ChartOfAccount? @relation("ChartOfAccountPrimary", fields: [primaryAccountId], references: [id])
  primaryAccountId String?         @map("primary_account_id")

  // Quan hệ ngược với GoodsAndServices (1 ChartOfAccount có thể được sử dụng bởi nhiều GoodsAndServices)
  warehouseGoods      GoodsAndServices[] @relation("WarehouseAccount")
  returnGoods         GoodsAndServices[] @relation("ReturnAccount")
  revenueGoods        GoodsAndServices[] @relation("RevenueAccount")
  expenseGoods        GoodsAndServices[] @relation("ExpenseAccount")
  salesAllowanceGoods GoodsAndServices[] @relation("SalesAllowanceAccount")
  discountGoods       GoodsAndServices[] @relation("DiscountAccount")

  // Relation ngược lại - danh sách các tài khoản con
  subAccounts ChartOfAccount[] @relation("ChartOfAccountPrimary")

  // Chứa danh sách kho
  warehouses Warehouse[] // Một tài khoản có nhiều kho

  // Quan hệ với bảng công ty
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  creditInventoryOutItems InventoryOutItem[] @relation("InventoryOutItemCredit")
  debitInventoryOutItems  InventoryOutItem[] @relation("InventoryOutItemDebit")

  creditInventoryInItems InventoryInItem[] @relation("InventoryInItemCredit")
  debitInventoryInItems  InventoryInItem[] @relation("InventoryInItemDebit")

  creditCashReceipVoucherItem CashReceipVoucherItem[] @relation("CashReceipVoucherItem_CreditAccount")
  debitCashReceipVoucherItem  CashReceipVoucherItem[] @relation("CashReceipVoucherItem_DebitAccount")

  creditCashPaymentVoucherItem CashPaymentVoucherItem[] @relation("CashPaymentVoucherItem_CreditAccount")
  debitCashPaymentVoucherItem  CashPaymentVoucherItem[] @relation("CashPaymentVoucherItem_DebitAccount")
  DepositReceipItemCredit      DepositReceipItem[]      @relation("DepositReceipItemCredit")
  DepositReceipItemDebit       DepositReceipItem[]      @relation("DepositReceipItemDebit")

  DepositPaymentItemCredit DepositPaymentItem[] @relation("DepositPaymentItemCredit")
  DepositPaymentItemDebit  DepositPaymentItem[] @relation("DepositPaymentItemDebit")

  @@map("chart_of_accounts")
}

model Warehouse {
  id      String @id @default(uuid())
  code    String // Mã kho
  name    String // Tên kho
  status  String // Trạng thái kho
  address String // Địa chỉ kho

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Quan hệ với công ty
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @map("customer_id")

  // Quan hệ với bảng tài khoản
  ChartOfAccount   ChartOfAccount? @relation(fields: [chartOfAccountId], references: [id])
  chartOfAccountId String?         @map("chart_of_account_id")

  InventoryOutItem InventoryOutItem[]
  InventoryInItem  InventoryInItem[]

  @@map("warehouses")
}

model InventoryIn {
  id                      String    @id @default(uuid())
  inventoryInVoucherType  String?   @map("inventory_in_voucher_type")
  address                 String?
  courier                 String? // Chuyển phát nhanh (Người giao hàng)
  description             String?
  withOriginalVoucher     String?   @map("with_original_vouher")
  postedDate              DateTime? @map("posted_date")
  voucherDate             DateTime? @map("voucher_date")
  voucherNumber           String?   @map("voucher_number")
  costOfInventoryReturned String?   @map("cost_of_inventory_returned")

  // Chứa danh sách bảng khác
  attached File[] // Một phiếu nhập kho có nhiều file

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Quan hệ với bảng nhân viên (Nhân viên bán hàng của loại hàng bị trả lại, và cần nhập vào kho)
  storePerson   Employee? @relation(fields: [storePersonId], references: [id])
  storePersonId String?   @map("store_person_id")

  // Relations với Partner
  client   Partner? @relation("InventoryInClient", fields: [clientId], references: [id])
  clientId String?  @map("client_id")

  object   Partner? @relation("InventoryInObject", fields: [objectId], references: [id])
  objectId String?  @map("object_id")

  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  InventoryInItem InventoryInItem[]

  @@map("inventory_ins")
}

model InventoryOut {
  id                      String    @id @default(uuid())
  inventoryOutVoucherType String?   @map("inventory_out_voucher_type")
  address                 String?
  receipient              String?
  particular              String? // Lý do xuất
  withOriginalVoucher     String?   @map("with_original_vouher")
  component               String?
  postedDate              DateTime? @map("posted_date")
  voucherDate             DateTime? @map("voucher_date")
  voucherNumber           String?   @map("voucher_number")

  // Chứa danh sách bảng khác
  attached File[] // Một phiếu xuất kho có nhiều file

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Quan hệ với bảng nhân viên (Nhân viên bán hàng của loại hàng bị trả lại, và cần nhập vào kho)
  storePerson   Employee? @relation(fields: [storePersonId], references: [id])
  storePersonId String?   @map("store_person_id")

  // Relations với Partner
  client   Partner? @relation("InventoryOutClient", fields: [clientId], references: [id])
  clientId String?  @map("client_id")

  object   Partner? @relation("InventoryOutObject", fields: [objectId], references: [id])
  objectId String?  @map("object_id")

  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  InventoryOutItem InventoryOutItem[]

  @@map("inventory_outs")
}

model InventoryOutItem {
  id                 String  @id @default(uuid())
  itemName           String? @map("item_name")
  quantity           Int?
  unitPrice          Int?    @map("unit_price")
  finishedGood       String? @map("finished_good")
  costClassification String? @map("cost_classification")
  costObject         String? @map("cost_object")

  creditAccount   ChartOfAccount? @relation("InventoryOutItemCredit", fields: [creditAccountId], references: [id])
  creditAccountId String?         @map("credit_account_id")

  debitAccount   ChartOfAccount? @relation("InventoryOutItemDebit", fields: [debitAccountId], references: [id])
  debitAccountId String?         @map("debit_account_id")

  // Các relations khác giữ nguyên
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId String?    @map("warehouse_id")

  item   GoodsAndServices? @relation(fields: [itemId], references: [id])
  itemId String?           @map("item_id")

  inventoryOut   InventoryOut? @relation(fields: [inventoryOutId], references: [id])
  inventoryOutId String?       @map("inventory_out_id")

  unit   Unit?   @relation(fields: [unitId], references: [id])
  unitId String? @map("unit_id")

  // Lệnh sản xuất (Tìm hiểu sau)
  productionOrders   productionOrders? @relation(fields: [productionOrdersId], references: [id])
  productionOrdersId String?

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("inventory_out_items")
}

model InventoryInItem {
  id        String  @id @default(uuid())
  itemName  String? @map("item_name")
  quantity  Int?
  unitPrice Int?    @map("unit_price")

  // ✅ Thêm relations với ChartOfAccount
  creditAccount   ChartOfAccount? @relation("InventoryInItemCredit", fields: [creditAccountId], references: [id])
  creditAccountId String?         @map("credit_account_id")

  debitAccount   ChartOfAccount? @relation("InventoryInItemDebit", fields: [debitAccountId], references: [id])
  debitAccountId String?         @map("debit_account_id")

  // ✅ Thêm các relations khác
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId String?    @map("warehouse_id")

  item   GoodsAndServices? @relation(fields: [itemId], references: [id])
  itemId String?           @map("item_id")

  // ✅ Relation với InventoryIn (không phải InventoryOut)
  inventoryIn   InventoryIn? @relation(fields: [inventoryInId], references: [id])
  inventoryInId String?      @map("inventory_in_id")

  unit   Unit?   @relation(fields: [unitId], references: [id])
  unitId String? @map("unit_id")

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("inventory_in_items")
}

model productionOrders {
  id          String    @id @default(uuid())
  date        DateTime?
  orderNo     Int?      @map("order_no")
  description String?

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  inventoryOutItem InventoryOutItem[]
}

model File {
  id       String @id @default(uuid())
  fileName String @map("file_name")
  fileSize Int    @map("file_size")
  mimeType String @map("mime_type")
  path     String // Đường dẫn lưu trữ

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Quan hệ với phiếu nhập kho
  InventoryIn   InventoryIn? @relation(fields: [inventoryInId], references: [id])
  inventoryInId String?      @map("inventory_in_id")

  InventoryOut       InventoryOut?    @relation(fields: [inventoryOutId], references: [id])
  inventoryOutId     String?          @map("inventory_out_id")
  DepositPaymentFile DepositPayment[] @relation("DepositPaymentFile")

  @@map("files")
}

// Phiếu thu tiền mặt
model CashReceip {
  id                     String    @id @default(uuid())
  cashReceiptVoucherType String?   @map("cash_receipt_voucher_type") // Loại phiếu thu
  payer                  String? // Người nộp
  address                String?
  postedDate             DateTime? @map("posted_date") // Ngày hạch toán
  voucherDate            DateTime? @map("voucher_date") // Ngày chứng từ
  voucherNumber          String?   @map("voucher_number") // Số chứng từ
  reason                 String? // Lý do nộp
  withOriginalVoucher    String?   @map("with_original_vouher")

  // employeeByType  -- employee -- nhân viên
  EmployeeByType Employee? @relation("CashReceipEmployeeByType", fields: [employeeByType], references: [id])
  employeeByType String?   @map("employee_by_type")

  // employee -- nhân viên
  Employee Employee? @relation("CashReceipEmployee", fields: [employee], references: [id])
  employee String?

  // subject -- partner -- Đối tượng nào
  Subject Partner? @relation("CashReceipSubject", fields: [subject], references: [id])
  subject String?

  // customer -- partner -- khách hàng
  Customer Partner? @relation("CashReceipCustomer", fields: [customer], references: [id])
  customer String?

  CashReceipVoucherItem CashReceipVoucherItem[] @relation("CashReceipVoucherItem_CashReceip")

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}

// Chi tiết phiếu thu tiền mặt
model CashReceipVoucherItem {
  id          String  @id @default(uuid())
  amount      Float?
  description String?

  CashReceip CashReceip? @relation("CashReceipVoucherItem_CashReceip", fields: [cashReceip], references: [id])
  cashReceip String?

  Subject Partner? @relation("CashReceipVoucherItemSubject", fields: [subject], references: [id])
  subject String?

  DebitAccount ChartOfAccount? @relation("CashReceipVoucherItem_DebitAccount", fields: [debitAccount], references: [id])
  debitAccount String?

  CreditAccount ChartOfAccount? @relation("CashReceipVoucherItem_CreditAccount", fields: [creditAccount], references: [id])
  creditAccount String?

  Bank Bank?   @relation("CashReceipVoucherItem_Bank", fields: [bank], references: [id])
  bank String?

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}

// Phiếu chi tiền mặt
model CashPayment {
  id                     String    @id @default(uuid())
  cashPaymentVoucherType String?   @map("cash_receipt_voucher_type") // Loại phiếu thu
  supplierName           String?   @map("supplier_name") // Tên nhà cung cấp
  address                String?
  recipient              String? // Người nhận
  withOriginalVoucher    String?   @map("with_original_vouher")
  reason                 String? // Lý do nộp
  postedDate             DateTime? @map("posted_date") // Ngày hạch toán
  voucherDate            DateTime? @map("voucher_date") // Ngày chứng từ
  voucherNumber          String?   @map("voucher_number") // Số chứng từ

  // employeeByType  -- employee -- nhân viên
  EmployeeByType Employee? @relation("CashPaymentEmployeeByType", fields: [employeeByType], references: [id])
  employeeByType String?   @map("employee_by_type")

  // employee -- nhân viên
  Employee Employee? @relation("CashPaymentEmployee", fields: [employee], references: [id])
  employee String?

  // subject -- partner -- Đối tượng nào
  Subject Partner? @relation("CashPaymentSubject", fields: [subject], references: [id])
  subject String?

  // supplier -- partner -- nhà cung cấp
  Supplier Partner? @relation("CashPaymentCustomer", fields: [supplier], references: [id])
  supplier String?

  // Auditing
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  CashPaymentVoucherItem CashPaymentVoucherItem[] @relation("CashPaymentVoucherItem_CashPayment")
}

// Chi tiết phiếu chi tiền mặt
model CashPaymentVoucherItem {
  id          String  @id @default(uuid())
  amount      Float?
  description String?

  CashPayment CashPayment? @relation("CashPaymentVoucherItem_CashPayment", fields: [cashPayment], references: [id])
  cashPayment String?

  Subject Partner? @relation("CashPaymentVoucherItemSubject", fields: [subject], references: [id])
  subject String?

  DebitAccount ChartOfAccount? @relation("CashPaymentVoucherItem_DebitAccount", fields: [debitAccount], references: [id])
  debitAccount String?

  CreditAccount ChartOfAccount? @relation("CashPaymentVoucherItem_CreditAccount", fields: [creditAccount], references: [id])
  creditAccount String?

  Bank Bank?   @relation("CashPaymentVoucherItem_Bank", fields: [bank], references: [id])
  bank String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}

// Tiền gửi - thu
model DepositReceip {
  id                String    @id @default(uuid())
  depositReceipType String?   @map("deposit_receip_type")
  postedDate        DateTime? @map("posted_date") // Ngày hạch toán
  voucherDate       DateTime? @map("voucher_date") // Ngày chứng từ
  voucherNumber     String?   @map("voucher_number") // Số chứng từ
  address           String?
  reason            String?
  bankName          String?   @map("bank_name")

  // Nhân viên thu nợ
  DebtCollector Employee? @relation("DebtCollectorEmployee", fields: [debtCollector], references: [id])
  debtCollector String?

  Employee Employee? @relation("DepositReceipEmployee", fields: [employee], references: [id])
  employee String?

  Subject Partner? @relation("DepositReceipSubject", fields: [subject], references: [id])
  subject String?

  // customer -- partner -- khách hàng
  Customer Partner? @relation("DepositReceipCustomer", fields: [customer], references: [id])
  customer String?

  Bank BankAccount? @relation("DepositReceipBank", fields: [bank], references: [id])
  bank String?

  DepositReceipItem DepositReceipItem[] @relation("DepositReceipItem_DepositReceip")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}

// Chi tiết tiền gửi - thu
model DepositReceipItem {
  id          String  @id @default(uuid())
  description String?
  ammount     Int?

  // loanAgreement 

  DepositReceip DepositReceip? @relation("DepositReceipItem_DepositReceip", fields: [depositReceip], references: [id])
  depositReceip String?

  Subject Partner? @relation("DepositReceipItemSubject", fields: [subject], references: [id])
  subject String?

  creditAccount   ChartOfAccount? @relation("DepositReceipItemCredit", fields: [creditAccountId], references: [id])
  creditAccountId String?         @map("credit_account_id")

  debitAccount   ChartOfAccount? @relation("DepositReceipItemDebit", fields: [debitAccountId], references: [id])
  debitAccountId String?         @map("debit_account_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}

// Tiền gửi - chi
model DepositPayment {
  id                 String    @id @default(uuid())
  depositPaymentType String?   @map("deposit_receip_type")
  paymentMethod      String?   @map("payment_method")
  paymentBankName    String?   @map("payment_bank_name") // Tên ngân hàng chi
  address            String?
  receipBankName     String?   @map("receip_bank_name") // Tên ngân hàng thu
  description        String?
  idCardNo           String?   @map("id_card_no")
  issuedBy           String?   @map("issued_by")
  issuedDate         DateTime? @map("issued_date")
  voucherNumber      String?   @map("voucher_number")
  voucherDate        DateTime? @map("voucher_date")

  Employee Employee? @relation("DepositPaymentEmployee", fields: [employee], references: [id])
  employee String?

  EmployeeByType Employee? @relation("DepositPaymentEmployeeByType", fields: [employeeByType], references: [id])
  employeeByType String?   @map("employee_by_type")

  Bank BankAccount? @relation("DepositPaymentBank", fields: [bank], references: [id])
  bank String?

  Supplier Partner? @relation("DepositPaymentSupplier", fields: [supplier], references: [id])
  supplier String?

  Subject Partner? @relation("DepositPaymentSubject", fields: [subject], references: [id])
  subject String?

  Attached File?   @relation("DepositPaymentFile", fields: [attached], references: [id])
  attached String?

  DepositPaymentItem_DepositPayment DepositPaymentItem[] @relation("DepositPaymentItem_DepositPayment")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}

// Chi tiết tiền gửi - chi
model DepositPaymentItem {
  id          String  @id @default(uuid())
  description String?
  ammount     Int?

  // loanAgreement

  DepositPayment DepositPayment? @relation("DepositPaymentItem_DepositPayment", fields: [depositPayment], references: [id])
  depositPayment String?

  Subject Partner? @relation("DepositPaymentItemSubject", fields: [subject], references: [id])
  subject String?

  creditAccount   ChartOfAccount? @relation("DepositPaymentItemCredit", fields: [creditAccountId], references: [id])
  creditAccountId String?         @map("credit_account_id")

  debitAccount   ChartOfAccount? @relation("DepositPaymentItemDebit", fields: [debitAccountId], references: [id])
  debitAccountId String?         @map("debit_account_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}
